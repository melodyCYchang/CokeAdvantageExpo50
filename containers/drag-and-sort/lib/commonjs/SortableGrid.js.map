{"version":3,"sources":["SortableGrid.tsx"],"names":["List","children","editing","onDragEnd","config","ConfigContext","SIZE","COL","scrollY","scrollView","positions","Object","assign","map","child","index","props","id","onScroll","contentOffset","y","value","height","Math","ceil","length"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;;;;;;;AAWA,MAAMA,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA;AAArB,CAAD,KAAiD;AAC5D,QAAMC,MAAM,GAAG,uBAAWC,4BAAX,CAAf;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAgBH,MAAtB;AACA,QAAMI,OAAO,GAAG,2CAAe,CAAf,CAAhB;AACA,QAAMC,UAAU,GAAG,4CAAnB;AACA,QAAMC,SAAS,GAAG,2CAChBC,MAAM,CAACC,MAAP,CACE,EADF,EAEE,GAAGX,QAAQ,CAACY,GAAT,CAAa,CAACC,KAAD,EAAQC,KAAR,MAAmB;AAAE,KAACD,KAAK,CAACE,KAAN,CAAYC,EAAb,GAAkBF;AAApB,GAAnB,CAAb,CAFL,CADgB,CAAlB;AAMA,QAAMG,QAAQ,GAAG,qDAAyB;AACxCA,IAAAA,QAAQ,EAAE,CAAC;AAAEC,MAAAA,aAAa,EAAE;AAAEC,QAAAA;AAAF;AAAjB,KAAD,KAA8B;AACtCZ,MAAAA,OAAO,CAACa,KAAR,GAAgBD,CAAhB;AACD;AAHuC,GAAzB,CAAjB;AAMA,sBACE,6BAAC,8BAAD,CAAU,UAAV;AACE,IAAA,QAAQ,EAAEF,QADZ;AAEE,IAAA,GAAG,EAAET,UAFP;AAGE,IAAA,qBAAqB,EAAE;AACrBa,MAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAUvB,QAAQ,CAACwB,MAAT,GAAkBlB,GAA5B,IAAmCD;AADtB,KAHzB;AAME,IAAA,4BAA4B,EAAE,KANhC;AAOE,IAAA,OAAO,EAAE,KAPX;AAQE,IAAA,mBAAmB,EAAE;AARvB,KAUGL,QAAQ,CAACY,GAAT,CAAcC,KAAD,IAAW;AACvB,wBACE,6BAAC,aAAD;AACE,MAAA,GAAG,EAAEA,KAAK,CAACE,KAAN,CAAYC,EADnB;AAEE,MAAA,SAAS,EAAEP,SAFb;AAGE,MAAA,EAAE,EAAEI,KAAK,CAACE,KAAN,CAAYC,EAHlB;AAIE,MAAA,OAAO,EAAEf,OAJX;AAKE,MAAA,SAAS,EAAEC,SALb;AAME,MAAA,UAAU,EAAEM,UANd;AAOE,MAAA,OAAO,EAAED;AAPX,OASGM,KATH,CADF;AAaD,GAdA,CAVH,CADF;AA4BD,CA7CD;;eA+Ced,I","sourcesContent":["import React, { ReactElement, useContext } from 'react';\nimport Animated, {\n  useAnimatedRef,\n  useAnimatedScrollHandler,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nimport Item from './Item';\nimport { ConfigContext } from './ConfigContext';\n\ninterface Positions {\n  [id: string]: number;\n}\n\ninterface ListProps {\n  children: ReactElement<{ id: string }>[];\n  editing: boolean;\n  onDragEnd: (diff: Positions) => void;\n}\nconst List = ({ children, editing, onDragEnd }: ListProps) => {\n  const config = useContext(ConfigContext);\n  const { SIZE, COL } = config;\n  const scrollY = useSharedValue(0);\n  const scrollView = useAnimatedRef<Animated.ScrollView>();\n  const positions = useSharedValue<Positions>(\n    Object.assign(\n      {},\n      ...children.map((child, index) => ({ [child.props.id]: index }))\n    )\n  );\n  const onScroll = useAnimatedScrollHandler({\n    onScroll: ({ contentOffset: { y } }) => {\n      scrollY.value = y;\n    },\n  });\n\n  return (\n    <Animated.ScrollView\n      onScroll={onScroll}\n      ref={scrollView}\n      contentContainerStyle={{\n        height: Math.ceil(children.length / COL) * SIZE,\n      }}\n      showsVerticalScrollIndicator={false}\n      bounces={false}\n      scrollEventThrottle={16}\n    >\n      {children.map((child) => {\n        return (\n          <Item\n            key={child.props.id}\n            positions={positions}\n            id={child.props.id}\n            editing={editing}\n            onDragEnd={onDragEnd}\n            scrollView={scrollView}\n            scrollY={scrollY}\n          >\n            {child}\n          </Item>\n        );\n      })}\n    </Animated.ScrollView>\n  );\n};\n\nexport default List;\n"]}