{"version":3,"sources":["Item.tsx"],"names":["React","useContext","Dimensions","StyleSheet","Animated","useAnimatedGestureHandler","useAnimatedStyle","useAnimatedReaction","withSpring","scrollTo","withTiming","useSharedValue","runOnJS","PanGestureHandler","ConfigContext","animationConfig","Item","children","positions","id","onDragEnd","scrollView","scrollY","editing","config","SIZE","COL","getOrder","getPosition","containerHeight","get","height","contentHeight","Object","keys","value","length","isGestureActive","position","translateX","x","translateY","y","newOrder","pos","onGestureEvent","onStart","_","ctx","onActive","translationX","translationY","oldOlder","idToSwap","find","key","newPositions","JSON","parse","stringify","lowerBound","upperBound","maxScroll","leftToScrollDown","diff","Math","min","onEnd","newPosition","style","zIndex","scale","top","left","width","transform","absoluteFill"],"mappings":"AAAA,OAAOA,KAAP,IAAsCC,UAAtC,QAAwD,OAAxD;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,cAAvC;AACA,OAAOC,QAAP,IACEC,yBADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,UAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,cAPF,EAQEC,OARF,QASO,yBATP;AAUA,SACEC,iBADF,QAGO,8BAHP;AAKA,SAASC,aAAT,EAAwBC,eAAxB,QAA0D,iBAA1D;;AAYA,MAAMC,IAAI,GAAG,CAAC;AACZC,EAAAA,QADY;AAEZC,EAAAA,SAFY;AAGZC,EAAAA,EAHY;AAIZC,EAAAA,SAJY;AAKZC,EAAAA,UALY;AAMZC,EAAAA,OANY;AAOZC,EAAAA;AAPY,CAAD,KAQI;AACf,QAAMC,MAAM,GAAGvB,UAAU,CAACa,aAAD,CAAzB;AACA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA;AAAvB,MAAuCJ,MAA7C;AACA,QAAMK,eAAe,GAAG3B,UAAU,CAAC4B,GAAX,CAAe,QAAf,EAAyBC,MAAzB,GAAkC,EAA1D;AACA,QAAMC,aAAa,GAAIC,MAAM,CAACC,IAAP,CAAYhB,SAAS,CAACiB,KAAtB,EAA6BC,MAA7B,GAAsCV,GAAvC,GAA8CD,IAApE;AACA,QAAMY,eAAe,GAAG1B,cAAc,CAAC,KAAD,CAAtC;AAEA,QAAM2B,QAAQ,GAAGV,WAAW,CAACJ,MAAD,EAASN,SAAS,CAACiB,KAAV,CAAgBhB,EAAhB,CAAT,CAA5B;AACA,QAAMoB,UAAU,GAAG5B,cAAc,CAAC2B,QAAQ,CAACE,CAAV,CAAjC;AACA,QAAMC,UAAU,GAAG9B,cAAc,CAAC2B,QAAQ,CAACI,CAAV,CAAjC;AAEAnC,EAAAA,mBAAmB,CACjB,MAAMW,SAAS,CAACiB,KAAV,CAAgBhB,EAAhB,CADW,EAEhBwB,QAAD,IAAc;AACZ,QAAI,CAACN,eAAe,CAACF,KAArB,EAA4B;AAC1B,YAAMS,GAAG,GAAGhB,WAAW,CAACJ,MAAD,EAASmB,QAAT,CAAvB;AACAJ,MAAAA,UAAU,CAACJ,KAAX,GAAmBzB,UAAU,CAACkC,GAAG,CAACJ,CAAL,EAAQzB,eAAR,CAA7B;AACA0B,MAAAA,UAAU,CAACN,KAAX,GAAmBzB,UAAU,CAACkC,GAAG,CAACF,CAAL,EAAQ3B,eAAR,CAA7B;AACD;AACF,GARgB,CAAnB;AAWA,QAAM8B,cAAc,GAAGxC,yBAAyB,CAG9C;AACAyC,IAAAA,OAAO,EAAE,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACnB;AACA,UAAIzB,OAAJ,EAAa;AACXyB,QAAAA,GAAG,CAACR,CAAJ,GAAQD,UAAU,CAACJ,KAAnB;AACAa,QAAAA,GAAG,CAACN,CAAJ,GAAQD,UAAU,CAACN,KAAnB;AACAE,QAAAA,eAAe,CAACF,KAAhB,GAAwB,IAAxB;AACD;AACF,KARD;AASAc,IAAAA,QAAQ,EAAE,CAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,EAAiCH,GAAjC,KAAyC;AACjD;AACA,UAAIzB,OAAJ,EAAa;AACXgB,QAAAA,UAAU,CAACJ,KAAX,GAAmBa,GAAG,CAACR,CAAJ,GAAQU,YAA3B;AACAT,QAAAA,UAAU,CAACN,KAAX,GAAmBa,GAAG,CAACN,CAAJ,GAAQS,YAA3B,CAFW,CAGX;;AACA,cAAMR,QAAQ,GAAGhB,QAAQ,CACvBH,MADuB,EAEvBe,UAAU,CAACJ,KAFY,EAGvBM,UAAU,CAACN,KAHY,EAIvBF,MAAM,CAACC,IAAP,CAAYhB,SAAS,CAACiB,KAAtB,EAA6BC,MAA7B,GAAsC,CAJf,CAAzB,CAJW,CAWX;;AACA,cAAMgB,QAAQ,GAAGlC,SAAS,CAACiB,KAAV,CAAgBhB,EAAhB,CAAjB;;AACA,YAAIwB,QAAQ,KAAKS,QAAjB,EAA2B;AACzB,gBAAMC,QAAQ,GAAGpB,MAAM,CAACC,IAAP,CAAYhB,SAAS,CAACiB,KAAtB,EAA6BmB,IAA7B,CACdC,GAAD,IAASrC,SAAS,CAACiB,KAAV,CAAgBoB,GAAhB,MAAyBZ,QADnB,CAAjB;;AAGA,cAAIU,QAAJ,EAAc;AACZ;AACA;AACA,kBAAMG,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezC,SAAS,CAACiB,KAAzB,CAAX,CAArB;AACAqB,YAAAA,YAAY,CAACrC,EAAD,CAAZ,GAAmBwB,QAAnB;AACAa,YAAAA,YAAY,CAACH,QAAD,CAAZ,GAAyBD,QAAzB;AACAlC,YAAAA,SAAS,CAACiB,KAAV,GAAkBqB,YAAlB;AACD;AACF,SAzBU,CA2BX;;;AACA,cAAMI,UAAU,GAAGtC,OAAO,CAACa,KAA3B;AACA,cAAM0B,UAAU,GAAGD,UAAU,GAAG/B,eAAb,GAA+BJ,IAAlD;AACA,cAAMqC,SAAS,GAAG9B,aAAa,GAAGH,eAAlC;AACA,cAAMkC,gBAAgB,GAAGD,SAAS,GAAGxC,OAAO,CAACa,KAA7C;;AACA,YAAIM,UAAU,CAACN,KAAX,GAAmByB,UAAvB,EAAmC;AACjC,gBAAMI,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASN,UAAU,GAAGnB,UAAU,CAACN,KAAjC,EAAwCyB,UAAxC,CAAb;AACAtC,UAAAA,OAAO,CAACa,KAAR,IAAiB6B,IAAjB;AACAvD,UAAAA,QAAQ,CAACY,UAAD,EAAa,CAAb,EAAgBC,OAAO,CAACa,KAAxB,EAA+B,KAA/B,CAAR;AACAa,UAAAA,GAAG,CAACN,CAAJ,IAASsB,IAAT;AACAvB,UAAAA,UAAU,CAACN,KAAX,GAAmBa,GAAG,CAACN,CAAJ,GAAQS,YAA3B;AACD;;AACD,YAAIV,UAAU,CAACN,KAAX,GAAmB0B,UAAvB,EAAmC;AACjC,gBAAMG,IAAI,GAAGC,IAAI,CAACC,GAAL,CACXzB,UAAU,CAACN,KAAX,GAAmB0B,UADR,EAEXE,gBAFW,CAAb;AAIAzC,UAAAA,OAAO,CAACa,KAAR,IAAiB6B,IAAjB;AACAvD,UAAAA,QAAQ,CAACY,UAAD,EAAa,CAAb,EAAgBC,OAAO,CAACa,KAAxB,EAA+B,KAA/B,CAAR;AACAa,UAAAA,GAAG,CAACN,CAAJ,IAASsB,IAAT;AACAvB,UAAAA,UAAU,CAACN,KAAX,GAAmBa,GAAG,CAACN,CAAJ,GAAQS,YAA3B;AACD;AACF;AACF,KA7DD;AA8DAgB,IAAAA,KAAK,EAAE,MAAM;AACX,YAAMC,WAAW,GAAGxC,WAAW,CAACJ,MAAD,EAASN,SAAS,CAACiB,KAAV,CAAgBhB,EAAhB,CAAT,CAA/B;AACAoB,MAAAA,UAAU,CAACJ,KAAX,GAAmBzB,UAAU,CAAC0D,WAAW,CAAC5B,CAAb,EAAgBzB,eAAhB,EAAiC,MAAM;AAClEsB,QAAAA,eAAe,CAACF,KAAhB,GAAwB,KAAxB;AACAvB,QAAAA,OAAO,CAACQ,SAAD,CAAP,CAAmBF,SAAS,CAACiB,KAA7B;AACD,OAH4B,CAA7B;AAIAM,MAAAA,UAAU,CAACN,KAAX,GAAmBzB,UAAU,CAAC0D,WAAW,CAAC1B,CAAb,EAAgB3B,eAAhB,CAA7B;AACD;AArED,GAH8C,CAAhD;AA0EA,QAAMsD,KAAK,GAAG/D,gBAAgB,CAAC,MAAM;AACnC,UAAMgE,MAAM,GAAGjC,eAAe,CAACF,KAAhB,GAAwB,GAAxB,GAA8B,CAA7C;AACA,UAAMoC,KAAK,GAAG/D,UAAU,CAAC6B,eAAe,CAACF,KAAhB,GAAwB,IAAxB,GAA+B,CAAhC,CAAxB;AACA,WAAO;AACLG,MAAAA,QAAQ,EAAE,UADL;AAELkC,MAAAA,GAAG,EAAE,CAFA;AAGLC,MAAAA,IAAI,EAAE,CAHD;AAILC,MAAAA,KAAK,EAAEjD,IAJF;AAKLM,MAAAA,MAAM,EAAEN,IALH;AAML6C,MAAAA,MANK;AAOLK,MAAAA,SAAS,EAAE,CACT;AAAEpC,QAAAA,UAAU,EAAEA,UAAU,CAACJ;AAAzB,OADS,EAET;AAAEM,QAAAA,UAAU,EAAEA,UAAU,CAACN;AAAzB,OAFS,EAGT;AAAEoC,QAAAA;AAAF,OAHS;AAPN,KAAP;AAaD,GAhB6B,CAA9B;AAiBA,sBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEF;AAAtB,kBACE,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAE9C,OAA5B;AAAqC,IAAA,cAAc,EAAEsB;AAArD,kBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE1C,UAAU,CAACyE;AAAjC,KACG3D,QADH,CADF,CADF,CADF;AASD,CAlID;;AAoIA,eAAeD,IAAf","sourcesContent":["import React, { ReactNode, RefObject, useContext } from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useAnimatedReaction,\n  withSpring,\n  scrollTo,\n  withTiming,\n  useSharedValue,\n  runOnJS,\n} from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\n\nimport { ConfigContext, animationConfig, Positions } from './ConfigContext';\n\ninterface ItemProps {\n  children: ReactNode;\n  positions: Animated.SharedValue<Positions>;\n  id: string;\n  editing: boolean;\n  onDragEnd: (diffs: Positions) => void;\n  scrollView: RefObject<Animated.ScrollView>;\n  scrollY: Animated.SharedValue<number>;\n}\n\nconst Item = ({\n  children,\n  positions,\n  id,\n  onDragEnd,\n  scrollView,\n  scrollY,\n  editing,\n}: ItemProps) => {\n  const config = useContext(ConfigContext);\n  const { SIZE, COL, getOrder, getPosition } = config;\n  const containerHeight = Dimensions.get('window').height - 40;\n  const contentHeight = (Object.keys(positions.value).length / COL) * SIZE;\n  const isGestureActive = useSharedValue(false);\n\n  const position = getPosition(config, positions.value[id]!);\n  const translateX = useSharedValue(position.x);\n  const translateY = useSharedValue(position.y);\n\n  useAnimatedReaction(\n    () => positions.value[id]!,\n    (newOrder) => {\n      if (!isGestureActive.value) {\n        const pos = getPosition(config, newOrder);\n        translateX.value = withTiming(pos.x, animationConfig);\n        translateY.value = withTiming(pos.y, animationConfig);\n      }\n    }\n  );\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { x: number; y: number }\n  >({\n    onStart: (_, ctx) => {\n      // dont allow drag start if we're done editing\n      if (editing) {\n        ctx.x = translateX.value;\n        ctx.y = translateY.value;\n        isGestureActive.value = true;\n      }\n    },\n    onActive: ({ translationX, translationY }, ctx) => {\n      // dont allow drag if we're done editing\n      if (editing) {\n        translateX.value = ctx.x + translationX;\n        translateY.value = ctx.y + translationY;\n        // 1. We calculate where the tile should be\n        const newOrder = getOrder(\n          config,\n          translateX.value,\n          translateY.value,\n          Object.keys(positions.value).length - 1\n        );\n\n        // 2. We swap the positions\n        const oldOlder = positions.value[id];\n        if (newOrder !== oldOlder) {\n          const idToSwap = Object.keys(positions.value).find(\n            (key) => positions.value[key] === newOrder\n          );\n          if (idToSwap) {\n            // Spread operator is not supported in worklets\n            // And Object.assign doesn't seem to be working on alpha.6\n            const newPositions = JSON.parse(JSON.stringify(positions.value));\n            newPositions[id] = newOrder;\n            newPositions[idToSwap] = oldOlder;\n            positions.value = newPositions;\n          }\n        }\n\n        // 3. Scroll up and down if necessary\n        const lowerBound = scrollY.value;\n        const upperBound = lowerBound + containerHeight - SIZE;\n        const maxScroll = contentHeight - containerHeight;\n        const leftToScrollDown = maxScroll - scrollY.value;\n        if (translateY.value < lowerBound) {\n          const diff = Math.min(lowerBound - translateY.value, lowerBound);\n          scrollY.value -= diff;\n          scrollTo(scrollView, 0, scrollY.value, false);\n          ctx.y -= diff;\n          translateY.value = ctx.y + translationY;\n        }\n        if (translateY.value > upperBound) {\n          const diff = Math.min(\n            translateY.value - upperBound,\n            leftToScrollDown\n          );\n          scrollY.value += diff;\n          scrollTo(scrollView, 0, scrollY.value, false);\n          ctx.y += diff;\n          translateY.value = ctx.y + translationY;\n        }\n      }\n    },\n    onEnd: () => {\n      const newPosition = getPosition(config, positions.value[id]!);\n      translateX.value = withTiming(newPosition.x, animationConfig, () => {\n        isGestureActive.value = false;\n        runOnJS(onDragEnd)(positions.value);\n      });\n      translateY.value = withTiming(newPosition.y, animationConfig);\n    },\n  });\n  const style = useAnimatedStyle(() => {\n    const zIndex = isGestureActive.value ? 100 : 0;\n    const scale = withSpring(isGestureActive.value ? 1.05 : 1);\n    return {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: SIZE,\n      height: SIZE,\n      zIndex,\n      transform: [\n        { translateX: translateX.value },\n        { translateY: translateY.value },\n        { scale },\n      ],\n    };\n  });\n  return (\n    <Animated.View style={style}>\n      <PanGestureHandler enabled={editing} onGestureEvent={onGestureEvent}>\n        <Animated.View style={StyleSheet.absoluteFill}>\n          {children}\n        </Animated.View>\n      </PanGestureHandler>\n    </Animated.View>\n  );\n};\n\nexport default Item;\n"]}